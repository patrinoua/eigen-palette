diff --git a/node_modules/relay-compiler/bin/relay-compiler b/node_modules/relay-compiler/bin/relay-compiler
index 19536a6..5d1a89b 100755
--- a/node_modules/relay-compiler/bin/relay-compiler
+++ b/node_modules/relay-compiler/bin/relay-compiler
@@ -291,7 +291,7 @@ function highlightSourceAtLocation(source, location) {
   var columnOffset = location.line === 1 ? firstLineColumnOffset : 0;
   var columnNum = location.column + columnOffset;
   var lines = body.split(/\r\n|[\n\r]/g);
-  return "".concat(source.name, " (").concat(lineNum, ":").concat(columnNum, ")\n") + printPrefixedLines([// Lines specified like this: ["prefix", "string"],
+  return "".concat(source.name, ":").concat(lineNum, ":").concat(columnNum, "\n") + printPrefixedLines([// Lines specified like this: ["prefix", "string"],
   ["".concat(lineNum - 1, ": "), lines[lineIndex - 1]], ["".concat(lineNum, ": "), lines[lineIndex]], ['', whitespace(columnNum - 1) + '^'], ["".concat(lineNum + 1, ": "), lines[lineIndex + 1]]]);
 }
 
@@ -2373,7 +2373,7 @@ var CodegenDirectory = /*#__PURE__*/function () {
   _proto.writeFile = function writeFile(filename, content) {
     var _this2 = this;
 
-    var shouldRepersist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
+    var shouldRepersist = true;
     Profiler.run('CodegenDirectory.writeFile', function () {
       _this2._addGenerated(filename);
 
@@ -2399,6 +2399,15 @@ var CodegenDirectory = /*#__PURE__*/function () {
 
   _proto._writeFile = function _writeFile(filePath, content) {
     if (!this.onlyValidate) {
+      // Don't overwrite files that have not changed
+      // This fixes an issue that was causing metro to HMR way too often
+      // on android, and to fall back to a full refresh instead of a fast reload on iOS
+      if (this._filesystem.existsSync(filePath)) {
+        const existing = this._filesystem.readFileSync(filePath, 'utf8').toString()
+        if (existing === content) {
+          return
+        }
+      }
       this._filesystem.writeFileSync(filePath, content, 'utf8');
     }
   }
@@ -8439,7 +8448,12 @@ function getRelayFileWriter(baseDir, languagePlugin, noFutureProofEnums, outputD
         }
 
         var data = JSON.stringify(object, null, 2);
-        fs.writeFileSync(persistedQueryPath, data, 'utf8');
+        if (
+          !fs.existsSync(persistedQueryPath) ||
+          data !== fs.readFileSync(persistedQueryPath, 'utf8').toString()
+        ) {
+          fs.writeFileSync(persistedQueryPath, data, 'utf8');
+        }
       }
 
       return results;
@@ -18775,10 +18789,11 @@ module.exports = function (tagFinder, getFileFilter) {
 
     var astDefinitions = [];
     var sources = [];
-    memoizedTagFinder(text, baseDir, file).forEach(function (template) {
-      var source = new GraphQL.Source(template, file.relPath);
+
+    memoizedTagFinder(text, baseDir, file).forEach(function (tag) {
+      var source = new GraphQL.Source(tag.template, path.join(path.relative(process.cwd(), baseDir), file.relPath), tag.sourceLocationOffset);
       var ast = parseGraphQL(source);
-      !ast.definitions.length ?  true ? invariant(false, 'RelaySourceModuleParser: Expected GraphQL text to contain at least one ' + 'definition (fragment, mutation, query, subscription), got `%s`.', template) : undefined : void 0;
+      !ast.definitions.length ?  true ? invariant(false, 'RelaySourceModuleParser: Expected GraphQL text to contain at least one ' + 'definition (fragment, mutation, query, subscription), got `%s`.', tag.template) : undefined : void 0;
       sources.push(source.body);
       astDefinitions.push.apply(astDefinitions, (0, _toConsumableArray2["default"])(ast.definitions));
     });
@@ -18863,9 +18878,7 @@ function find(tagFinder, text, absPath) {
   tags.forEach(function (tag) {
     return validateTemplate(tag, moduleName, absPath);
   });
-  return tags.map(function (tag) {
-    return tag.template;
-  });
+  return tags;
 }
 
 function validateTemplate(_ref, moduleName, filePath) {
